"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
import os
import tempfile
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, LOG_LEVEL, LOG_FORMAT
from ocr_processor import OCRProcessor


class OCRTelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å OCR —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –±–æ—Ç–∞
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format=LOG_FORMAT,
            level=getattr(logging, LOG_LEVEL)
        )
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.ocr_processor = OCRProcessor()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
        
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OCR –±–æ—Ç!

üì± <b>–ß—Ç–æ —è —É–º–µ—é:</b>
–Ø –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.

üì∑ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ—ë –∏ –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

‚öôÔ∏è <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ OpenCV –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ Tesseract OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ, —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º

‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help
        """
        
        await update.message.reply_text(welcome_text, parse_mode='HTML')
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å OCR –±–æ—Ç–æ–º")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        help_text = """
üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è OCR –±–æ—Ç–æ–º:</b>

1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>
   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, BMP

2Ô∏è‚É£ <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>
   ‚Ä¢ –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenCV
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

3Ô∏è‚É£ <b>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>
   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–æ–≤

üåê <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b>
‚Ä¢ –†—É—Å—Å–∫–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)

üìä <b>–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–ª–æ–≤
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤

‚ö° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚ùó <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–µ—Ç–∫–æ—Å—Ç–∏ —Ñ–æ—Ç–æ
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è Telegram API

üõ†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OpenCV
‚Ä¢ OCR —Å –ø–æ–º–æ—â—å—é Tesseract
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞

ü§ñ OCR –±–æ—Ç –≥–æ—Ç–æ–≤ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = update.effective_user.id
        
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç {user_name} (ID: {user_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await update.message.reply_text(
            "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥", 
            parse_mode='HTML'
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)
            photo_file = await update.message.photo[-1].get_file()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                "üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", 
                parse_mode='HTML'
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            photo_bytes = await photo_file.download_as_bytearray()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                "üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å OpenCV...", 
                parse_mode='HTML'
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            extracted_text = await self.ocr_processor.extract_text(photo_bytes)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω
            if not extracted_text or len(extracted_text.strip()) == 0:
                await processing_msg.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç</b>\n\n"
                    "üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                    "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–æ–µ\n"
                    "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π\n"
                    "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n"
                    "‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ
            text_info = self.ocr_processor.get_text_info(extracted_text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —è–∑—ã–∫–∞
            language_emoji = {
                'russian': 'üá∑üá∫',
                'english': 'üá∫üá∏',
                'mixed': 'üåê',
                'unknown': '‚ùì'
            }.get(text_info.get('language', 'unknown'), '‚ùì')
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            max_text_length = 3000
            display_text = extracted_text
            is_truncated = False
            
            if len(extracted_text) > max_text_length:
                display_text = extracted_text[:max_text_length] + "..."
                is_truncated = True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"""
üìÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:</b>

üìù <b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<pre>{display_text}</pre>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –Ø–∑—ã–∫: {language_emoji} {text_info.get('language', 'unknown').title()}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: <b>{text_info.get('length', 0)}</b>
‚Ä¢ –°–ª–æ–≤: <b>{text_info.get('words', 0)}</b>
‚Ä¢ –°—Ç—Ä–æ–∫: <b>{text_info.get('lines', 0)}</b>
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã: {'‚úÖ' if text_info.get('has_numbers', False) else '‚ùå'}
‚Ä¢ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: {'‚úÖ' if text_info.get('has_special_chars', False) else '‚ùå'}
"""
            
            if is_truncated:
                result_text += f"\n‚ö†Ô∏è <i>–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_text_length} —Å–∏–º–≤–æ–ª–æ–≤)</i>"
            
            result_text += "\n\nüì∑ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.edit_text(result_text, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_name}: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤, —è–∑—ã–∫: {text_info.get('language', 'unknown')}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await processing_msg.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.",
                parse_mode='HTML'
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        """
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not document.mime_type or not document.mime_type.startswith('image/'):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞</b>\n\n"
                "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF, BMP).",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text(
                "‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                "üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                parse_mode='HTML'
            )
            return
        
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = update.effective_user.id
        
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await update.message.reply_text(
            "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥", 
            parse_mode='HTML'
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_file = await document.get_file()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                "üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...", 
                parse_mode='HTML'
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            doc_bytes = await doc_file.download_as_bytearray()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                "üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å OpenCV...", 
                parse_mode='HTML'
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            extracted_text = await self.ocr_processor.extract_text(doc_bytes)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω
            if not extracted_text or len(extracted_text.strip()) == 0:
                await processing_msg.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç</b>\n\n"
                    "üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                    "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–æ–µ\n"
                    "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π\n"
                    "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n"
                    "‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ
            text_info = self.ocr_processor.get_text_info(extracted_text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —è–∑—ã–∫–∞
            language_emoji = {
                'russian': 'üá∑üá∫',
                'english': 'üá∫üá∏',
                'mixed': 'üåê',
                'unknown': '‚ùì'
            }.get(text_info.get('language', 'unknown'), '‚ùì')
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            max_text_length = 3000
            display_text = extracted_text
            is_truncated = False
            
            if len(extracted_text) > max_text_length:
                display_text = extracted_text[:max_text_length] + "..."
                is_truncated = True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"""
üìÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b>

üìù <b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<pre>{display_text}</pre>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –Ø–∑—ã–∫: {language_emoji} {text_info.get('language', 'unknown').title()}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: <b>{text_info.get('length', 0)}</b>
‚Ä¢ –°–ª–æ–≤: <b>{text_info.get('words', 0)}</b>
‚Ä¢ –°—Ç—Ä–æ–∫: <b>{text_info.get('lines', 0)}</b>
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã: {'‚úÖ' if text_info.get('has_numbers', False) else '‚ùå'}
‚Ä¢ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: {'‚úÖ' if text_info.get('has_special_chars', False) else '‚ùå'}
"""
            
            if is_truncated:
                result_text += f"\n‚ö†Ô∏è <i>–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_text_length} —Å–∏–º–≤–æ–ª–æ–≤)</i>"
            
            result_text += "\n\nüì∑ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.edit_text(result_text, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_name}: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤, —è–∑—ã–∫: {text_info.get('language', 'unknown')}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await processing_msg.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.\n"
                "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.",
                parse_mode='HTML'
            )
    
    async def handle_unsupported(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            "üì∑ –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n\n"
            "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPG, PNG, GIF, BMP)\n\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode='HTML'
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        """
        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ OCR –±–æ—Ç–µ: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫ OCR –±–æ—Ç–∞
        """
        self.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OCR –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        application.add_handler(
            MessageHandler(filters.PHOTO, self.handle_photo)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(filters.Document.IMAGE, self.handle_document)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(~(filters.PHOTO | filters.Document.IMAGE | filters.COMMAND), self.handle_unsupported)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        print("ü§ñ OCR –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
        print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenCV + Tesseract OCR")
        print("üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        self.logger.info("OCR –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ polling...")
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OCR –±–æ—Ç–∞")
            print("\nüõë OCR –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            if "Conflict" in str(e):
                self.logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä OCR –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                print("‚ùå –û—à–∏–±–∫–∞: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä OCR –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ.")
            else:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR –±–æ—Ç–∞: {e}")
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR –±–æ—Ç–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ OCR –±–æ—Ç–∞
    """
    try:
        bot = OCRTelegramBot()
        bot.run()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å OCR –±–æ—Ç–∞: {e}")
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å OCR –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
